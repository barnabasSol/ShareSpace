@page "/chat/{username}"
@layout UserLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authstate
@inject IMessageService MessageService
@implements IAsyncDisposable
@attribute [Authorize]


<div class="grid-container">
    <div class="header">
        <h4>Chat with User @username</h4>
    </div>
    <div class="main">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li style="color: white;">@message</li>
            }
        </ul>
    </div>
    <div class="footer p-2">
        <MudTextField Style="background-color: transparent;" @bind-Value="MessageInput" @ref="multilineReference"
            T="string" Variant="Variant.Outlined" Lines="2" Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="@(() => multilineReference!.FocusAsync())" />

        <input @bind="MessageInput" type="text" class="input" placeholder="Type your message here...">
        <button class="button" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</div>



@code {
    [Parameter]
    public string? username { get; set; }
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? MessageInput;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private MudTextField<string>? multilineReference;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("ShareSpaceAccessToken");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager
        .ToAbsoluteUri("/sharespacehub"), opts =>
        {
            opts.AccessTokenProvider = () => Task.FromResult(token)!;
        })
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>("ReceiveMessageFromUser", (user, message) =>
        {
            var formatted_message = $"{user}: {message}";
            messages.Add(formatted_message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SendMessageToUser", username, MessageInput);
            await hubConnection.InvokeAsync("ShowUsersInChat", username);
        }
    }
}
