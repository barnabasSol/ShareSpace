@page "/chat/{username}"
@layout UserLayout
@implements IAsyncDisposable
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authstate
@inject IMessageService MessageService
@attribute [Authorize(Roles = "user")]

<div class="chat-container">
    <div id="mainchat" class="m-1">
        @if (!messages.Any())
        {
            <div style="display: flex; justify-content: center; align-items: center;" class="h-100 w-100">
                <MudAlert Icon="@Icons.Material.Filled.Chat" Class="my-2" Severity="Severity.Normal"
                    Variant="Variant.Outlined">Say Hi To @username</MudAlert>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <Message message="message" />
            }
        }
    </div>
    <div class="footer p-2">
        <MudTextField Immediate=true Lines="1" AutoFocus @bind-Text="MessageInput" T="string"
            Placeholder="@messageLabel" Variant="Variant.Outlined" Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="Send" OnKeyDown="HandleOnEnter"
            TextUpdateSuppression=false />
    </div>
</div>



@code {
    [Parameter]
    public string? username { get; set; }
    private HubConnection? hubConnection;
    private List<MessageDto> messages = new();
    private string? MessageInput;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private string messageLabel = "";





    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    protected async override Task OnParametersSetAsync()
    {
        await StartChatSignalRConnectionAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrEmpty(MessageInput))
            {
                await hubConnection.InvokeAsync("SendMessageToUser", username, MessageInput);
                await hubConnection.InvokeAsync("ShowUsersInChat", username);
                MessageInput = "";
            }
        }
        StateHasChanged();
    }

    private async Task HandleOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Send();
        }
    }

}
