@page "/chat/{username}"
@using System.Security.Claims
@layout UserLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authstate
@inject IMessageService MessageService
@implements IAsyncDisposable
@attribute [Authorize]

<div class="chat-container">
    <div id="mainchat" class="m-1">
        <Message Messages="messages" />
    </div>
    <div class="footer p-2">
        <MudTextField Lines="1" @ref="singleLineReference" @bind-Text="MessageInput" T="string"
            Placeholder="write something here..." Variant="Variant.Outlined" Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="Send" />
    </div>
</div>



@code {
    [Parameter]
    public string? username { get; set; }
    private HubConnection? hubConnection;
    private List<MessageDto> messages = new();
    private string? MessageInput;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private MudTextField<string>? singleLineReference;





    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("ShareSpaceAccessToken");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager
        .ToAbsoluteUri("/messagehub"), opts =>
        {
            opts.AccessTokenProvider = () => Task.FromResult(token)!;
        })
        .WithAutomaticReconnect()
        .Build();


        hubConnection.On<string, string, Guid>("ReceiveMessageFromUser", (user, message, current_user) =>
        {
            messages.Add(new MessageDto
                {
                    Text = message!,
                    To = user!,
                    From = current_user,
                    SentDateTime = DateTime.Now,
                    ProfilePic = messages.FirstOrDefault(f => f.From.Equals(current_user))!.ProfilePic
                });
            StateHasChanged();
        });

        hubConnection.On<List<MessageDto>>("ShowMessages", (messages) =>
        {
            this.messages = messages;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("FetchMessagesOfUser", username);
    }




    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrEmpty(MessageInput))
            {
                await hubConnection.InvokeAsync("SendMessageToUser", username, MessageInput);
                await hubConnection.InvokeAsync("ShowUsersInChat", username);
                MessageInput = "";
            }
        }
    }
}
