@page "/chat-area"
@layout UserLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@implements IAsyncDisposable



<div class="form-group">
    <label>
        User:
        <input @bind="NameInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="MessageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li style="color: white;">@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? NameInput;
    private string? MessageInput;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("ShareSpaceAccessToken");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager
        .ToAbsoluteUri("/sharespacechathub"), opts =>
        {
            opts.AccessTokenProvider = () => Task.FromResult(token)!;
        })
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formatted_message = $"{user}: {message}";
            messages.Add(formatted_message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SendMessage", NameInput, MessageInput);
        }
    }
}
