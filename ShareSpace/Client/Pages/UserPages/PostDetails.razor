@page "/postdetails/{post_id:guid}"
@layout UserLayout
@inject AuthenticationStateProvider authstate
@inject IPostService PostService
@inject ICommentService CommentService
@inject IUserService UserService
@inject NavigationManager NavManager
@inject ISnackbar SnackBar

@if (post is null)
{
    <PostDetailsLoading />
}
else
{
    <div class="col mb-1 p-1">
        <MudCard>
            <MudCardHeader Style="background: rgb(27, 27, 27); height: 60px">
                <CardHeaderAvatar>
                    @if (post.PostUserProfilePicUrl == "")
                    {
                        <MudAvatar Size="Size.Large" Color="Color.Tertiary">@post.PostedName[0]</MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Size="Size.Medium">
                            <MudImage Style="border-radius: 10%; border: 0;" Src="@post.PostUserProfilePicUrl"
                                Alt="Card image cap" />
                        </MudAvatar>
                    }
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@post.PostedName</MudText>
                    <MudText Typo="Typo.body2">@post.PostedUsername</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true">
                        <MudMenuItem>Share</MudMenuItem>
                        <MudMenuItem>Not Interested</MudMenuItem>
                        <MudMenuItem>Mute User</MudMenuItem>
                        <AuthorizeView>
                            <Authorized>
                                @if (post.PostedUserId == Guid.Parse(context.User.Claims.FirstOrDefault(c => c.Type ==
                               "Sub")!.Value))
                                {
                                    <MudMenuItem OnTouch="DeletePost" OnClick="DeletePost">Delete Post</MudMenuItem>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>

            @if (post.PostPictureUrls!.Any())
            {
                <MudCarousel Style="background-color: rgb(27, 27, 27); height:420px;" ShowBullets="false"
                    EnableSwipeGesture="true" AutoCycle="false" TData="object"
                    ShowArrows="@(post.PostPictureUrls!.Count() > 1)">
                    @foreach (var image in post.PostPictureUrls!)
                    {
                        <MudCarouselItem Style="background-color: rgb(27, 27, 27);" Transition="Transition.Slide">
                            <MudCardMedia loading="lazy" Class="w-100" Image="@image" Height="460" />
                        </MudCarouselItem>
                    }
                </MudCarousel>

            }
            <MudCardContent Style="background: rgb(27, 27, 27); color: white;">
                <MudText Typo="Typo.body2">@((MarkupString)post.TextContent!.Replace("\n", "<br>"))</MudText>
            </MudCardContent>
            <MudCardActions Style="background: rgb(27, 27, 27);" Class="d-flex justify-content-between gap-5">
                <div>
                    <MudToggleIconButton Toggled="@post.IsLikedByCurrentUser" ToggledChanged="OnToggledChanged"
                        Icon="@Icons.Material.Filled.Favorite" Title="Like" ToggledIcon="@Icons.Material.Filled.Favorite"
                        ToggledColor="@Color.Primary" />
                    <span style="color: white;">@post.LikesCount</span>
                </div>
                <div>
                    <span style="color: white;">@post.ViewsCount</span>
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Default" />
                </div>
            </MudCardActions>
        </MudCard>
    </div>

    <div class="d-flex flex-column">
        <MudTextField AutoGrow Lines="1" Immediate=true Class="mb-2" @bind-Text="comment_input" T="string"
            Placeholder="Comment" Variant="Variant.Outlined" />
        <div class="d-flex justify-content-end w-100">
            <MudButton style="width: 100px;" OnClick="AddComment" Disabled="comment_input.Length < 1"
                Variant="Variant.Filled" Color="Color.Success">
                Done
            </MudButton>
        </div>
    </div>
    <h5 class="ml-2" style="color: white;">Comments</h5>
    <MudDivider Style="color: white;" DividerType="DividerType.Middle" Class="my-3" />
    if (post.Comments is null)
    {
        <h1 style="color: white;">loading</h1>
    }
    else if (!post.Comments.Any())
    {
    }
    else
    {
        @foreach (var x in post.Comments.OrderByDescending(o => o.CommentedAt).ToList())
        {
            <Comment comment="x" OnDelete="DeleteComment" />
        }

    }
}

@code {
    [Parameter]
    public Guid post_id { get; set; }

    private string comment_input = "";

    private PostDetailDto? post;

    async void DeletePost()
    {
        var result = await PostService.DeletePost(post_id);
        if (result.IsSuccess)
        {
            ShowSnackBarWithOptions("it is deleted", Variant.Filled, Severity.Info);
            NavManager.NavigateTo("/main");
        }
        else
        {
            ShowSnackBarWithOptions("failed to deleted", Variant.Filled, Severity.Error);
        }
    }

    void ShowSnackBarWithOptions(string message, Variant variant, Severity severity)
    {
        SnackBar.Configuration.SnackbarVariant = variant;
        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        SnackBar.Configuration.VisibleStateDuration = 1500;
        SnackBar.Add($"{message}", severity);
    }
    protected override async Task OnInitializedAsync()
    {
        var result = await PostService.GetPostDetails(post_id);
        if (result.IsSuccess)
        {
            post = result.Data;
        }
    }
    public async void OnToggledChanged(bool toggled)
    {
        var result = await PostService.UpdateLike(new LikedPostDto
            {
                UserId = Guid.Empty,
                PostId = post_id
            });
        if (result.IsSuccess)
        {
            post!.IsLikedByCurrentUser = !post.IsLikedByCurrentUser;

            if (post.IsLikedByCurrentUser)
            {
                post.LikesCount += 1;
            }
            else
            {
                post.LikesCount -= 1;
            }
        }
        StateHasChanged();
    }

    async void DeleteComment(CommentDto commentDto)
    {
        var result = await CommentService.DeleteComment(commentDto.CommentId);
        if (result.IsSuccess)
        {
            post!.Comments!.Remove(commentDto);
        }
        StateHasChanged();
    }
    public ExtraUserInfoDto extraUserInfo = new();
    async void AddComment()
    {
        var state = await authstate.GetAuthenticationStateAsync();
        string current_user_string = state.User.Claims
        .Where(_ => _.Type == "Sub")
        .Select(_ => _.Value)
        .FirstOrDefault()!;

        var response = await UserService.GetExtraUserInfo(Guid.Parse(current_user_string));
        if (response is not null)
        {
            if (response.IsSuccess)
            {
                if (response.Data is not null)
                    extraUserInfo = response.Data;
            }
        }
        var result = await CommentService.AddComment(new CommentAddDto
            {
                PostId = post!.PostId,
                Content = comment_input,
            });

        if (result.IsSuccess)
        {
            post.Comments!.Insert(0, new CommentDto
                {
                    CommentId = result.Data,
                    UserProfilePicUrl = extraUserInfo.ProfilePicUrl,
                    UserId = Guid.Parse(current_user_string),
                    UserName = state.User.Claims
                .Where(_ => _.Type == "UserName")
                .Select(_ => _.Value)
                .FirstOrDefault()!,
                    Name = state.User.Claims
                .Where(_ => _.Type == "Name")
                .Select(_ => _.Value)
                .FirstOrDefault()!,
                    Content = comment_input
                });
            comment_input = "";
        }
        StateHasChanged();
    }

}