@page "/profile"
@layout UserLayout
@inject IUserService UserService
@inject ISnackbar SnackBar

<div class="w-100 d-flex flex-column align-items-center pl-2 noscrollbar">

    <MudCard Class="w-100">
        <AuthorizeView>
            <Authorized>
                @if (Extras.ProfilePicUrl is null)
                {
                    <MudSkeleton Class="w-100" Style="background:rgb(27, 27, 27);" SkeletonType="SkeletonType.Rectangle"
                        Animation="Animation.Wave" Height="200px" />
                }
                else
                {
                    <MudCardMedia @onclick="@(()=>ShowSnackBarWithOptions(Variant.Filled, Severity.Success))"
                        Style="background-color: rgb(27, 27, 27) ;" Image="@Extras.ProfilePicUrl" Height="200" />

                }
                <MudCardContent Class="" Style="background: rgb(27, 27, 27);">
                    <div class="d-flex flex-column align-items-center">
                        @if (context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value.Length >= 9)
                        {
                            <h3 style="color:white;">
                                @context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value.Substring(0, 9)...
                            </h3>
                        }
                        else
                        {
                            <h3 style="color:white;">
                                @context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value
                            </h3>
                        }
                        @if (context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value.Length >= 9)
                        {
                            <h6 style="color: rgb(185, 183, 183);">
                                &#64;@context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value.Substring(0,
                                    9)...
                            </h6>
                        }
                        else
                        {
                            <h6 style="color: rgb(185, 183, 183);">
                                &#64;@context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value
                            </h6>
                        }

                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="d-flex flex-column align-items-center">
                            <h5 style="color: white">@Extras.FollowersCount</h5>
                            <h5 style="color: rgb(185, 183, 183);">Followers</h5>
                        </div>
                        <div class="d-flex flex-column align-items-center">
                            <h5 style="color: white;">@Extras.FollowingCount</h5>
                            <h5 style="color: rgb(185, 183, 183);">Following</h5>
                        </div>
                    </div>
                    @if (Extras is not null)
                    {
                        <MudText Typo="Typo.body1" Class="mt-2">joined @(ToHumanReadableString(JoinedSince))</MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">@Extras.Bio</MudText>
                    }

                </MudCardContent>
            </Authorized>
        </AuthorizeView>
        <MudCardActions Class="d-flex justify-content-center" Style="background: rgb(27, 27, 27);">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Check My Profile</MudButton>
        </MudCardActions>
    </MudCard>



    <div class="mt-3 w-100">
        <MudDivider Style="color: white;" DividerType="DividerType.Middle" Class="my-1" />
        <h4 style="color: white; position: sticky; top: 0;">Interests</h4>
        @if (Extras.Interests is null)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            @foreach (var item in Extras.Interests)
            {
                <MudChip Color="@(colors[new Random().Next(colors.Length)])">@item.Value</MudChip>
            }
        }

    </div>
</div>

@code {
    public ExtraUserInfoDto Extras { get; set; } = new();
    public TimeSpan JoinedSince;

    protected override async Task OnInitializedAsync()
    {
        var response = await UserService.GetExtraUserInfo();
        if (response is not null)
        {
            if (response.IsSuccess)
            {
                if (response.Data is not null)
                {
                    Extras = response.Data;
                    JoinedSince = (DateTime.Now - Extras.JoinedDate);

                }
            }
        }
    }

    private Color[] colors = new[]
    {
        Color.Success, Color.Warning, Color.Error, Color.Dark
    };

    void ShowSnackBarWithOptions(Variant variant, Severity severity)
    {
        SnackBar.Configuration.SnackbarVariant = variant;
        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        SnackBar.Configuration.VisibleStateDuration = 5000;
        SnackBar.Add($"mother fucker", severity);
    }

    public string ToHumanReadableString(TimeSpan timeSpan)
    {
        return timeSpan.TotalDays switch
        {
            > 365 => $"{(int)(timeSpan.TotalDays / 365)} year(s) ago",
            > 30 => $"{(int)(timeSpan.TotalDays / 30)} month(s) ago",
            > 7 => $"{(int)(timeSpan.TotalDays / 7)} week(s) ago",
            _ => timeSpan.TotalHours switch
            {
                > 24 => $"{(int)(timeSpan.TotalHours / 24)} day(s) ago",
                _ => timeSpan.TotalMinutes switch
                {
                    > 60 => $"{(int)(timeSpan.TotalMinutes / 60)} hour(s) ago",
                    _ => $"{(int)timeSpan.TotalSeconds} second(s) ago"
                }
            }
        };
    }
}
