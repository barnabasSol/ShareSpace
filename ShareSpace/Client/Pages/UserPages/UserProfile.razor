@page "/current_user"
@layout UserLayout
@inject IUserService UserService
@inject ISnackbar SnackBar
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider authstate
<style>
    .astyle {
        color: gray;
        text-decoration: none;
        transition: color, text-decoration, 0.2s;
        font-size: 1.5em;
        margin: 0;
    }

    .astyle:hover {
        color: white;
        cursor: pointer;
    }

    .astyle:focus {
        color: white;
    }
</style>

<div class="w-100 d-flex flex-column align-items-center pl-2 noscrollbar">
    <MudOverlay @bind-Visible="FollowersVisible" DarkBackground="true" ZIndex="9999" AutoClose="true">
        @if (Followers is null)
        {
            <h5>loading</h5>
        }
        else
        {
            if (!Followers.Any())
            {

                <h2 class="mb-2" style="color: white;">You Have No Followers</h2>
            }
            else
            {
                <h2 class="mb-2" style="color: white;">Followers</h2>
                @foreach (var item in Followers)
                {
                    <FollowerUserItem user="item" OnFollow="FollowUser" OnUnfollow="UnfollowUser" />
                }
            }
        }
    </MudOverlay>

    <MudOverlay @bind-Visible="FollowingVisible" DarkBackground="true" ZIndex="9999" AutoClose="true">
        @if (Following is null)
        {
            <h5>loading</h5>
        }
        else
        {
            if (!Following.Any())
            {
                <h2 class="mb-2" style="color: white;">You Don't Follow Anyone</h2>
            }
            else
            {
                <h2 class="mb-2" style="color: white;">Followers</h2>
                @foreach (var item in Following)
                {
                    <FollowerUserItem user="item" OnFollow="FollowFollowingUser" OnUnfollow="UnfollowFollowingUser" />
                }
            }
        }
    </MudOverlay>

    <MudCard Class="w-100">
        <AuthorizeView>
            <Authorized>
                @if (Extras.ProfilePicUrl is null)
                {
                    <MudSkeleton Class="w-100" Style="background:rgb(27, 27, 27);" SkeletonType="SkeletonType.Rectangle"
                        Animation="Animation.Wave" Height="200px" />
                }
                else
                {
                    <MudCardMedia @onclick="@(()=>ShowSnackBarWithOptions(Variant.Filled, Severity.Success))"
                        Style="background-color: rgb(27, 27, 27); background-position: center;"
                        Image="@Extras.ProfilePicUrl" Height="200" />

                }
                <MudCardContent Class="" Style="background: rgb(27, 27, 27);">
                    <div class="d-flex flex-column align-items-center">
                        @if (context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value.Length >= 9)
                        {
                            <h3 style="color:white;">
                                @context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value.Substring(0, 9)
                            </h3>
                        }
                        else
                        {
                            <h3 style="color:white;">
                                @context.User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value
                            </h3>
                        }
                        @if (context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value.Length >= 9)
                        {
                            <h6 style="color: rgb(185, 183, 183);">
                                &#64;@context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value.Substring(0,
                                    9)...
                            </h6>
                        }
                        else
                        {
                            <h6 style="color: rgb(185, 183, 183);">
                                &#64;@context.User.Claims.FirstOrDefault(c => c.Type == "UserName")!.Value
                            </h6>
                        }

                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="d-flex flex-column align-items-center">
                            <h5 style="color: white">@Extras.FollowersCount</h5>
                            <span class="astyle" @onclick="DisplayFollowers">
                                Followers</span>

                        </div>
                        <div class="d-flex flex-column align-items-center">
                            <h5 id="followingCount" style="color: white;">@Extras.FollowingCount</h5>
                            <a class="astyle" @onclick="DisplayFollowing">
                                Following</a>
                        </div>
                    </div>
                    @if (Extras is not null)
                    {
                        <MudText Typo="Typo.body1" Class="mt-2">@Extras.Bio</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Primary" Class="mt-2">joined @(GetDuration())</MudText>
                    }

                </MudCardContent>
                <MudCardActions Class="d-flex justify-content-center" Style="background: rgb(27, 27, 27);">
                    <MudButton OnClick="NavigateToUserProfile" Variant="Variant.Outlined" Color="Color.Secondary">
                        Check My
                        Profile
                    </MudButton>
                </MudCardActions>
            </Authorized>
        </AuthorizeView>
    </MudCard>



    <div class="mt-3 w-100">
        <MudDivider Style="color: white;" DividerType="DividerType.Middle" Class="my-1" />
        <h4 style="color: white; position: sticky; top: 0;">Interests</h4>
        @if (Extras.Interests is null)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            @foreach (var item in Extras.Interests)
            {
                <MudChip Color="@(colors[new Random().Next(colors.Length)])">@item.Value</MudChip>
            }
        }

    </div>
</div>

@code {
    [Parameter]
    public ExtraUserInfoDto Extras { get; set; } = new();




    private Color[] colors = new[]
    {
Color.Success,
Color.Warning,
Color.Error,
Color.Dark
};

    private async Task HandleFollowAction(FollowerUserDto user, List<FollowerUserDto> userList, Func<Guid,
    Task<ShareSpace.Shared.ResponseTypes.ApiResponse<string>>> action, string jsFunction)
    {
        var result = await action(user.UserId);
        if (result.IsSuccess)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/site.js");
            await module.InvokeVoidAsync(jsFunction);
            var User = userList.FirstOrDefault(f => f.UserId == user.UserId);
            if (User is not null)
            {
                User.IsBeingFollowed = jsFunction == "incrementFollowingCount";
            }
        }
        StateHasChanged();
    }

    public async void FollowUser(FollowerUserDto user)
    {
        await HandleFollowAction(user, Followers!, UserService.FollowUser, "incrementFollowingCount");
    }

    public async void UnfollowUser(FollowerUserDto user)
    {
        await HandleFollowAction(user, Followers!, UserService.FollowUser, "decrementFollowingCount");
    }

    public async void FollowFollowingUser(FollowerUserDto user)
    {
        await HandleFollowAction(user, Following!, UserService.FollowUser, "incrementFollowingCount");
    }

    public async void UnfollowFollowingUser(FollowerUserDto user)
    {
        await HandleFollowAction(user, Following!, UserService.FollowUser, "decrementFollowingCount");
    }

    void ShowSnackBarWithOptions(Variant variant, Severity severity)
    {
        SnackBar.Configuration.SnackbarVariant = variant;
        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        SnackBar.Configuration.VisibleStateDuration = 5000;
        SnackBar.Add($"profile clicked", severity);
    }

    public string GetDuration()
    {
        TimeSpan timeSpan = DateTime.Now - Extras.JoinedDate;
        return timeSpan.TotalDays switch
        {
            > 365 => $"{(int)(timeSpan.TotalDays / 365)} year(s) ago",
            > 30 => $"{(int)(timeSpan.TotalDays / 30)} month(s) ago",
            > 7 => $"{(int)(timeSpan.TotalDays / 7)} week(s) ago",
            _ => timeSpan.TotalHours switch
            {
                > 24 => $"{(int)(timeSpan.TotalHours / 24)} day(s) ago",
                _ => timeSpan.TotalMinutes switch
                {
                    > 60 => $"{(int)(timeSpan.TotalMinutes / 60)} hour(s) ago",
                    _ => $"{(int)timeSpan.TotalSeconds} second(s) ago"
                }
            }
        };
    }
    private bool FollowersVisible;
    private bool FollowingVisible;

    private List<FollowerUserDto>? Followers;
    private List<FollowerUserDto>? Following;


    void CloseOverlay()
    {
        FollowersVisible = false;
        FollowingVisible = false;
    }

    async void DisplayFollowers()
    {
        var result = await UserService.GetFollowers();
        if (result.IsSuccess)
        {
            Followers = result.Data!;
            FollowersVisible = true;
        }
        StateHasChanged();
    }

    async void NavigateToUserProfile()
    {
        var state = await authstate.GetAuthenticationStateAsync();
        string current_user_string = state.User.Claims
        .Where(_ => _.Type == "UserName")
        .Select(_ => _.Value)
        .FirstOrDefault()!;
        NavManager.NavigateTo($"/profile/{current_user_string}");
        StateHasChanged();
    }
    async void DisplayFollowing()
    {
        var result = await UserService.GetFollowing();
        if (result.IsSuccess)
        {
            Following = result.Data!;
            FollowingVisible = true;
        }
        StateHasChanged();
    }
}
