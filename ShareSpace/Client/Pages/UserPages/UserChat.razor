@inject IMessageService MessageService
@inject NavigationManager nav
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authstate
@inject IMessageService MessageService
@implements IAsyncDisposable
@attribute [Authorize]


@if (hubConnection is null)
{
    <h4 class="color: white;">loading..</h4>
}
else
{
    @foreach (var user in users_messages)
    {
        <a class="mycolor" href="/chat/@user.UserName">
            <div class="message w-100 mb-2 effect">
                <div class="message-content">
                    @if (user.ProfilePicUrl == null)
                    {
                        <MudAvatar Class="mr-2" Size="Size.Large" Color="Color.Tertiary">
                            @user.Name![0].ToString().ToUpper()
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Class="mr-2" Size="Size.Large" Color="Color.Tertiary">
                            <MudImage Src=@user.ProfilePicUrl Alt="Card image cap" />
                        </MudAvatar>
                    }
                    <div class="bg-transparent">
                        <p class="message-author mb-2">@user.Name</p>
                        @if (user.Seen is true)
                        {
                            if (user.Message!.Length > 20)
                            {
                                <p style="color: gray;">@(user.Message.Substring(0, 20) + "...")</p>
                            }
                            else
                            {
                                <p style="color: gray;">@user.Message</p>
                            }
                        }
                        else
                        {
                            if (user.Message!.Length > 20)
                            {
                                <p class="message-text">@(user.Message.Substring(0, 20) + "...")</p>
                            }
                            else
                            {
                                <p class="message-text">@user.Message</p>
                            }
                        }
                    </div>
                </div>
                <p class="message-time">
                    @if ((DateTime.Now - user.SentDateTime).TotalHours > 24)
                    {
                        if ((DateTime.Now - user.SentDateTime).TotalHours < 48)
                        {
                            @("Yesterday at " + user.SentDateTime.ToString("t"))
                        }
                        else
                        {
                            @user.SentDateTime.ToString("g")
                        }
                    }
                    else
                    {
                        @user.SentDateTime.ToString("t")
                    }
                </p>
            </div>
        </a>
    }
}





@code {
    private HubConnection? hubConnection;
    private List<UserMessageDto> users_messages = new();
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("ShareSpaceAccessToken");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(nav
        .ToAbsoluteUri("/messagehub"), opts =>
        {
            opts.AccessTokenProvider = () => Task.FromResult(token)!;
        })
        .WithAutomaticReconnect()
        .Build();


        hubConnection.On<List<UserMessageDto>>("ReceiveUsersInFromUser", (users_in_chat) =>
        {
            users_messages = users_in_chat;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await authstate.GetAuthenticationStateAsync();
            string current_username = state.User.Claims
            .Where(_ => _.Type == "UserName")
            .Select(_ => _.Value).FirstOrDefault()!;
            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("ShowUsersInChat", current_username);
            }
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
